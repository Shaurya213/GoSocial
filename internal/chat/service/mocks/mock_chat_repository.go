// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository/chat_repository.go
//
// Generated by this command:
//
//	mockgen -source=../repository/chat_repository.go -destination=mocks/mock_chat_repository.go
//

// Package mock_repository is a generated GoMock package.
package mocks 

import (
	context "context"
	dbmysql "gosocial/internal/dbmysql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChatRepository is a mock of ChatRepository interface.
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
	isgomock struct{}
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository.
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance.
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// FetchHistory mocks base method.
func (m *MockChatRepository) FetchHistory(ctx context.Context, conversationID string) ([]*dbmysql.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchHistory", ctx, conversationID)
	ret0, _ := ret[0].([]*dbmysql.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchHistory indicates an expected call of FetchHistory.
func (mr *MockChatRepositoryMockRecorder) FetchHistory(ctx, conversationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchHistory", reflect.TypeOf((*MockChatRepository)(nil).FetchHistory), ctx, conversationID)
}

// Save mocks base method.
func (m *MockChatRepository) Save(ctx context.Context, msg *dbmysql.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockChatRepositoryMockRecorder) Save(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockChatRepository)(nil).Save), ctx, msg)
}
