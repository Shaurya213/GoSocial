// Code generated by MockGen. DO NOT EDIT.
// Source: ../service/chat_service.go
//
// Generated by this command:
//
//	mockgen -source=../service/chat_service.go -destination=mocks/mock_chat_service.go
//

// Package mock_service is a generated GoMock package.
package mocks 

import (
	context "context"
	dbmysql "gosocial/internal/dbmysql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChatService is a mock of ChatService interface.
type MockChatService struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceMockRecorder
	isgomock struct{}
}

// MockChatServiceMockRecorder is the mock recorder for MockChatService.
type MockChatServiceMockRecorder struct {
	mock *MockChatService
}

// NewMockChatService creates a new mock instance.
func NewMockChatService(ctrl *gomock.Controller) *MockChatService {
	mock := &MockChatService{ctrl: ctrl}
	mock.recorder = &MockChatServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService) EXPECT() *MockChatServiceMockRecorder {
	return m.recorder
}

// GetMessageHistory mocks base method.
func (m *MockChatService) GetMessageHistory(ctx context.Context, conversationID string) ([]*dbmysql.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageHistory", ctx, conversationID)
	ret0, _ := ret[0].([]*dbmysql.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageHistory indicates an expected call of GetMessageHistory.
func (mr *MockChatServiceMockRecorder) GetMessageHistory(ctx, conversationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageHistory", reflect.TypeOf((*MockChatService)(nil).GetMessageHistory), ctx, conversationID)
}

// SendMessage mocks base method.
func (m *MockChatService) SendMessage(ctx context.Context, msg *dbmysql.Message) (*dbmysql.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, msg)
	ret0, _ := ret[0].(*dbmysql.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChatServiceMockRecorder) SendMessage(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChatService)(nil).SendMessage), ctx, msg)
}
