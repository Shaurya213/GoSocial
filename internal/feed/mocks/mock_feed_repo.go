// Code generated by MockGen. DO NOT EDIT.
// Source: internal/feed/feed_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dbmysql "GoSocial/internal/dbmysql"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockContent is a mock of Content interface.
type MockContent struct {
	ctrl     *gomock.Controller
	recorder *MockContentMockRecorder
}

// MockContentMockRecorder is the mock recorder for MockContent.
type MockContentMockRecorder struct {
	mock *MockContent
}

// NewMockContent creates a new mock instance.
func NewMockContent(ctrl *gomock.Controller) *MockContent {
	mock := &MockContent{ctrl: ctrl}
	mock.recorder = &MockContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContent) EXPECT() *MockContentMockRecorder {
	return m.recorder
}

// CreateContent mocks base method.
func (m *MockContent) CreateContent(ctx context.Context, content *dbmysql.Content) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContent", ctx, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContent indicates an expected call of CreateContent.
func (mr *MockContentMockRecorder) CreateContent(ctx, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContent", reflect.TypeOf((*MockContent)(nil).CreateContent), ctx, content)
}

// DeleteContent mocks base method.
func (m *MockContent) DeleteContent(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContent", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContent indicates an expected call of DeleteContent.
func (mr *MockContentMockRecorder) DeleteContent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContent", reflect.TypeOf((*MockContent)(nil).DeleteContent), ctx, id)
}

// GetContentByID mocks base method.
func (m *MockContent) GetContentByID(ctx context.Context, id int64) (*dbmysql.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentByID", ctx, id)
	ret0, _ := ret[0].(*dbmysql.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContentByID indicates an expected call of GetContentByID.
func (mr *MockContentMockRecorder) GetContentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentByID", reflect.TypeOf((*MockContent)(nil).GetContentByID), ctx, id)
}

// ListExpiredStories mocks base method.
func (m *MockContent) ListExpiredStories(ctx context.Context, now time.Time) ([]dbmysql.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExpiredStories", ctx, now)
	ret0, _ := ret[0].([]dbmysql.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExpiredStories indicates an expected call of ListExpiredStories.
func (mr *MockContentMockRecorder) ListExpiredStories(ctx, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExpiredStories", reflect.TypeOf((*MockContent)(nil).ListExpiredStories), ctx, now)
}

// ListUserContent mocks base method.
func (m *MockContent) ListUserContent(ctx context.Context, userID int64) ([]dbmysql.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserContent", ctx, userID)
	ret0, _ := ret[0].([]dbmysql.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserContent indicates an expected call of ListUserContent.
func (mr *MockContentMockRecorder) ListUserContent(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserContent", reflect.TypeOf((*MockContent)(nil).ListUserContent), ctx, userID)
}

// MockMediaRef is a mock of MediaRef interface.
type MockMediaRef struct {
	ctrl     *gomock.Controller
	recorder *MockMediaRefMockRecorder
}

// MockMediaRefMockRecorder is the mock recorder for MockMediaRef.
type MockMediaRefMockRecorder struct {
	mock *MockMediaRef
}

// NewMockMediaRef creates a new mock instance.
func NewMockMediaRef(ctrl *gomock.Controller) *MockMediaRef {
	mock := &MockMediaRef{ctrl: ctrl}
	mock.recorder = &MockMediaRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaRef) EXPECT() *MockMediaRefMockRecorder {
	return m.recorder
}

// CreateMediaRef mocks base method.
func (m *MockMediaRef) CreateMediaRef(ctx context.Context, media *dbmysql.MediaRef, fileData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMediaRef", ctx, media, fileData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMediaRef indicates an expected call of CreateMediaRef.
func (mr *MockMediaRefMockRecorder) CreateMediaRef(ctx, media, fileData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMediaRef", reflect.TypeOf((*MockMediaRef)(nil).CreateMediaRef), ctx, media, fileData)
}

// DeleteMedia mocks base method.
func (m *MockMediaRef) DeleteMedia(ctx context.Context, mediaRefID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMedia", ctx, mediaRefID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMedia indicates an expected call of DeleteMedia.
func (mr *MockMediaRefMockRecorder) DeleteMedia(ctx, mediaRefID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMedia", reflect.TypeOf((*MockMediaRef)(nil).DeleteMedia), ctx, mediaRefID)
}

// GetMediaRefByID mocks base method.
func (m *MockMediaRef) GetMediaRefByID(ctx context.Context, id int64) (*dbmysql.MediaRef, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaRefByID", ctx, id)
	ret0, _ := ret[0].(*dbmysql.MediaRef)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMediaRefByID indicates an expected call of GetMediaRefByID.
func (mr *MockMediaRefMockRecorder) GetMediaRefByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaRefByID", reflect.TypeOf((*MockMediaRef)(nil).GetMediaRefByID), ctx, id)
}

// MockReactions is a mock of Reactions interface.
type MockReactions struct {
	ctrl     *gomock.Controller
	recorder *MockReactionsMockRecorder
}

// MockReactionsMockRecorder is the mock recorder for MockReactions.
type MockReactionsMockRecorder struct {
	mock *MockReactions
}

// NewMockReactions creates a new mock instance.
func NewMockReactions(ctrl *gomock.Controller) *MockReactions {
	mock := &MockReactions{ctrl: ctrl}
	mock.recorder = &MockReactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReactions) EXPECT() *MockReactionsMockRecorder {
	return m.recorder
}

// AddReaction mocks base method.
func (m *MockReactions) AddReaction(ctx context.Context, reaction *dbmysql.Reaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReaction", ctx, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReaction indicates an expected call of AddReaction.
func (mr *MockReactionsMockRecorder) AddReaction(ctx, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReaction", reflect.TypeOf((*MockReactions)(nil).AddReaction), ctx, reaction)
}

// DeleteReaction mocks base method.
func (m *MockReactions) DeleteReaction(ctx context.Context, userID, contentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReaction", ctx, userID, contentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReaction indicates an expected call of DeleteReaction.
func (mr *MockReactionsMockRecorder) DeleteReaction(ctx, userID, contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReaction", reflect.TypeOf((*MockReactions)(nil).DeleteReaction), ctx, userID, contentID)
}

// GetReactionsForContent mocks base method.
func (m *MockReactions) GetReactionsForContent(ctx context.Context, contentID int64) ([]dbmysql.Reaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReactionsForContent", ctx, contentID)
	ret0, _ := ret[0].([]dbmysql.Reaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReactionsForContent indicates an expected call of GetReactionsForContent.
func (mr *MockReactionsMockRecorder) GetReactionsForContent(ctx, contentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReactionsForContent", reflect.TypeOf((*MockReactions)(nil).GetReactionsForContent), ctx, contentID)
}
