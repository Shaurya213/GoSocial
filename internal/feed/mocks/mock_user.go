// Code generated by MockGen. DO NOT EDIT.
// Source: api/v1/user/user_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	user "GoSocial/api/v1/user"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// AcceptFriendRequest mocks base method.
func (m *MockUserServiceClient) AcceptFriendRequest(ctx context.Context, in *user.FriendAcceptRequest, opts ...grpc.CallOption) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AcceptFriendRequest", varargs...)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptFriendRequest indicates an expected call of AcceptFriendRequest.
func (mr *MockUserServiceClientMockRecorder) AcceptFriendRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendRequest", reflect.TypeOf((*MockUserServiceClient)(nil).AcceptFriendRequest), varargs...)
}

// GetProfile mocks base method.
func (m *MockUserServiceClient) GetProfile(ctx context.Context, in *user.GetProfileRequest, opts ...grpc.CallOption) (*user.ProfileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProfile", varargs...)
	ret0, _ := ret[0].(*user.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserServiceClientMockRecorder) GetProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserServiceClient)(nil).GetProfile), varargs...)
}

// GetUserDevices mocks base method.
func (m *MockUserServiceClient) GetUserDevices(ctx context.Context, in *user.UserID, opts ...grpc.CallOption) (*user.DeviceTokenList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserDevices", varargs...)
	ret0, _ := ret[0].(*user.DeviceTokenList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevices indicates an expected call of GetUserDevices.
func (mr *MockUserServiceClientMockRecorder) GetUserDevices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevices", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserDevices), varargs...)
}

// ListFriends mocks base method.
func (m *MockUserServiceClient) ListFriends(ctx context.Context, in *user.UserID, opts ...grpc.CallOption) (*user.FriendList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFriends", varargs...)
	ret0, _ := ret[0].(*user.FriendList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriends indicates an expected call of ListFriends.
func (mr *MockUserServiceClientMockRecorder) ListFriends(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriends", reflect.TypeOf((*MockUserServiceClient)(nil).ListFriends), varargs...)
}

// Login mocks base method.
func (m *MockUserServiceClient) Login(ctx context.Context, in *user.LoginRequest, opts ...grpc.CallOption) (*user.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*user.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockUserServiceClient) Register(ctx context.Context, in *user.RegisterRequest, opts ...grpc.CallOption) (*user.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*user.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserServiceClient)(nil).Register), varargs...)
}

// RegisterDevice mocks base method.
func (m *MockUserServiceClient) RegisterDevice(ctx context.Context, in *user.DeviceTokenRequest, opts ...grpc.CallOption) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterDevice", varargs...)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockUserServiceClientMockRecorder) RegisterDevice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockUserServiceClient)(nil).RegisterDevice), varargs...)
}

// RemoveDevice mocks base method.
func (m *MockUserServiceClient) RemoveDevice(ctx context.Context, in *user.DeviceTokenRequest, opts ...grpc.CallOption) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveDevice", varargs...)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDevice indicates an expected call of RemoveDevice.
func (mr *MockUserServiceClientMockRecorder) RemoveDevice(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDevice", reflect.TypeOf((*MockUserServiceClient)(nil).RemoveDevice), varargs...)
}

// SendFriendRequest mocks base method.
func (m *MockUserServiceClient) SendFriendRequest(ctx context.Context, in *user.FriendRequest, opts ...grpc.CallOption) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendFriendRequest", varargs...)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendFriendRequest indicates an expected call of SendFriendRequest.
func (mr *MockUserServiceClientMockRecorder) SendFriendRequest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFriendRequest", reflect.TypeOf((*MockUserServiceClient)(nil).SendFriendRequest), varargs...)
}

// UpdateProfile mocks base method.
func (m *MockUserServiceClient) UpdateProfile(ctx context.Context, in *user.UpdateProfileRequest, opts ...grpc.CallOption) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProfile", varargs...)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserServiceClientMockRecorder) UpdateProfile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateProfile), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// AcceptFriendRequest mocks base method.
func (m *MockUserServiceServer) AcceptFriendRequest(arg0 context.Context, arg1 *user.FriendAcceptRequest) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendRequest", arg0, arg1)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptFriendRequest indicates an expected call of AcceptFriendRequest.
func (mr *MockUserServiceServerMockRecorder) AcceptFriendRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendRequest", reflect.TypeOf((*MockUserServiceServer)(nil).AcceptFriendRequest), arg0, arg1)
}

// GetProfile mocks base method.
func (m *MockUserServiceServer) GetProfile(arg0 context.Context, arg1 *user.GetProfileRequest) (*user.ProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0, arg1)
	ret0, _ := ret[0].(*user.ProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserServiceServerMockRecorder) GetProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserServiceServer)(nil).GetProfile), arg0, arg1)
}

// GetUserDevices mocks base method.
func (m *MockUserServiceServer) GetUserDevices(arg0 context.Context, arg1 *user.UserID) (*user.DeviceTokenList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDevices", arg0, arg1)
	ret0, _ := ret[0].(*user.DeviceTokenList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevices indicates an expected call of GetUserDevices.
func (mr *MockUserServiceServerMockRecorder) GetUserDevices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevices", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserDevices), arg0, arg1)
}

// ListFriends mocks base method.
func (m *MockUserServiceServer) ListFriends(arg0 context.Context, arg1 *user.UserID) (*user.FriendList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriends", arg0, arg1)
	ret0, _ := ret[0].(*user.FriendList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriends indicates an expected call of ListFriends.
func (mr *MockUserServiceServerMockRecorder) ListFriends(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriends", reflect.TypeOf((*MockUserServiceServer)(nil).ListFriends), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserServiceServer) Login(arg0 context.Context, arg1 *user.LoginRequest) (*user.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*user.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserServiceServer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockUserServiceServer) Register(arg0 context.Context, arg1 *user.RegisterRequest) (*user.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*user.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserServiceServer)(nil).Register), arg0, arg1)
}

// RegisterDevice mocks base method.
func (m *MockUserServiceServer) RegisterDevice(arg0 context.Context, arg1 *user.DeviceTokenRequest) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDevice", arg0, arg1)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockUserServiceServerMockRecorder) RegisterDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockUserServiceServer)(nil).RegisterDevice), arg0, arg1)
}

// RemoveDevice mocks base method.
func (m *MockUserServiceServer) RemoveDevice(arg0 context.Context, arg1 *user.DeviceTokenRequest) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDevice", arg0, arg1)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDevice indicates an expected call of RemoveDevice.
func (mr *MockUserServiceServerMockRecorder) RemoveDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDevice", reflect.TypeOf((*MockUserServiceServer)(nil).RemoveDevice), arg0, arg1)
}

// SendFriendRequest mocks base method.
func (m *MockUserServiceServer) SendFriendRequest(arg0 context.Context, arg1 *user.FriendRequest) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFriendRequest", arg0, arg1)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendFriendRequest indicates an expected call of SendFriendRequest.
func (mr *MockUserServiceServerMockRecorder) SendFriendRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFriendRequest", reflect.TypeOf((*MockUserServiceServer)(nil).SendFriendRequest), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockUserServiceServer) UpdateProfile(arg0 context.Context, arg1 *user.UpdateProfileRequest) (*user.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(*user.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserServiceServerMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateProfile), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}
