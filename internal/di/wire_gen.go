// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"fmt"
	"github.com/google/wire"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"gorm.io/gorm"
	"gosocial/api/v1/user"
	"gosocial/internal/config"
	"gosocial/internal/dbmongo"
	"gosocial/internal/dbmysql"
	"gosocial/internal/feed"
)

// Injectors from wire.go:

// Wire Entry Point
func InitializeFeedService() (*FeedApp, func(), error) {
	configConfig := config.LoadConfig()
	db, err := dbmysql.NewMySQL(configConfig)
	if err != nil {
		return nil, nil, err
	}
	mongoClient, err := dbmongo.NewMongoConnection(configConfig)
	if err != nil {
		return nil, nil, err
	}
	mediaStorage := dbmongo.NewMediaStorage(mongoClient)
	feedRepository := ProvideFeedRepository(db, mediaStorage)
	userServiceClient, cleanup, err := ProvideUserServiceClient(configConfig)
	if err != nil {
		return nil, nil, err
	}
	feedService := ProvideFeedService(feedRepository, userServiceClient)
	feedHandlers := ProvideFeedHandlers(feedService)
	feedApp := &FeedApp{
		Handler: feedHandlers,
		DB:      db,
		Config:  configConfig,
	}
	return feedApp, func() {
		cleanup()
	}, nil
}

// wire.go:

// FEED SERVICE
type FeedApp struct {
	Handler *feed.FeedHandlers
	DB      *gorm.DB
	Config  *config.Config
}

// Provide FeedRepository
func ProvideFeedRepository(db *gorm.DB, mediaStorage *dbmongo.MediaStorage) *feed.FeedRepository {
	return feed.NewFeedRepository(db, mediaStorage)
}

// Provide User Service Client
func ProvideUserServiceClient(cfg *config.Config) (user.UserServiceClient, func(), error) {
	conn, err := grpc.Dial(fmt.Sprintf("localhost:%s", cfg.Server.UserServicePort), grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, nil, err
	}

	client := user.NewUserServiceClient(conn)
	cleanup := func() {
		conn.Close()
	}

	return client, cleanup, nil
}

// Provide FeedService
func ProvideFeedService(
	repo *feed.FeedRepository,
	userClient user.UserServiceClient,
) *feed.FeedService {
	return feed.NewFeedService(repo, repo, repo, userClient)
}

// Provide FeedHandlers
func ProvideFeedHandlers(feedService *feed.FeedService) *feed.FeedHandlers {
	return &feed.FeedHandlers{
		FeedSvc: feedService,
	}
}

// Provider Set
var FeedProviderSet = wire.NewSet(config.LoadConfig, dbmysql.NewMySQL, dbmongo.NewMongoConnection, dbmongo.NewMediaStorage, ProvideFeedRepository,
	ProvideUserServiceClient,
	ProvideFeedService,
	ProvideFeedHandlers, wire.Struct(new(FeedApp), "*"),
)
