// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/device_repository.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	dbmysql "gosocial/internal/dbmysql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// GetUserDevices mocks base method.
func (m *MockDeviceRepository) GetUserDevices(ctx context.Context, userID uint64) ([]*dbmysql.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDevices", ctx, userID)
	ret0, _ := ret[0].([]*dbmysql.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevices indicates an expected call of GetUserDevices.
func (mr *MockDeviceRepositoryMockRecorder) GetUserDevices(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevices", reflect.TypeOf((*MockDeviceRepository)(nil).GetUserDevices), ctx, userID)
}

// RegisterDevice mocks base method.
func (m *MockDeviceRepository) RegisterDevice(ctx context.Context, device *dbmysql.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDevice", ctx, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockDeviceRepositoryMockRecorder) RegisterDevice(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockDeviceRepository)(nil).RegisterDevice), ctx, device)
}

// RemoveDevice mocks base method.
func (m *MockDeviceRepository) RemoveDevice(ctx context.Context, deviceToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDevice", ctx, deviceToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDevice indicates an expected call of RemoveDevice.
func (mr *MockDeviceRepositoryMockRecorder) RemoveDevice(ctx, deviceToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDevice", reflect.TypeOf((*MockDeviceRepository)(nil).RemoveDevice), ctx, deviceToken)
}

// UpdateDeviceActivity mocks base method.
func (m *MockDeviceRepository) UpdateDeviceActivity(ctx context.Context, deviceToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceActivity", ctx, deviceToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceActivity indicates an expected call of UpdateDeviceActivity.
func (mr *MockDeviceRepositoryMockRecorder) UpdateDeviceActivity(ctx, deviceToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceActivity", reflect.TypeOf((*MockDeviceRepository)(nil).UpdateDeviceActivity), ctx, deviceToken)
}
