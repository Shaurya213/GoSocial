// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/friend_repository.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	dbmysql "gosocial/internal/dbmysql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFriendRepository is a mock of FriendRepository interface.
type MockFriendRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFriendRepositoryMockRecorder
}

// MockFriendRepositoryMockRecorder is the mock recorder for MockFriendRepository.
type MockFriendRepositoryMockRecorder struct {
	mock *MockFriendRepository
}

// NewMockFriendRepository creates a new mock instance.
func NewMockFriendRepository(ctrl *gomock.Controller) *MockFriendRepository {
	mock := &MockFriendRepository{ctrl: ctrl}
	mock.recorder = &MockFriendRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendRepository) EXPECT() *MockFriendRepositoryMockRecorder {
	return m.recorder
}

// CheckFriendshipExists mocks base method.
func (m *MockFriendRepository) CheckFriendshipExists(ctx context.Context, userID, friendUserID uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFriendshipExists", ctx, userID, friendUserID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFriendshipExists indicates an expected call of CheckFriendshipExists.
func (mr *MockFriendRepositoryMockRecorder) CheckFriendshipExists(ctx, userID, friendUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFriendshipExists", reflect.TypeOf((*MockFriendRepository)(nil).CheckFriendshipExists), ctx, userID, friendUserID)
}

// CreateFriendRequest mocks base method.
func (m *MockFriendRepository) CreateFriendRequest(ctx context.Context, friend *dbmysql.Friend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriendRequest", ctx, friend)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFriendRequest indicates an expected call of CreateFriendRequest.
func (mr *MockFriendRepositoryMockRecorder) CreateFriendRequest(ctx, friend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriendRequest", reflect.TypeOf((*MockFriendRepository)(nil).CreateFriendRequest), ctx, friend)
}

// GetFriendRequest mocks base method.
func (m *MockFriendRepository) GetFriendRequest(ctx context.Context, userID, friendUserID uint64) (*dbmysql.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendRequest", ctx, userID, friendUserID)
	ret0, _ := ret[0].(*dbmysql.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendRequest indicates an expected call of GetFriendRequest.
func (mr *MockFriendRepositoryMockRecorder) GetFriendRequest(ctx, userID, friendUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendRequest", reflect.TypeOf((*MockFriendRepository)(nil).GetFriendRequest), ctx, userID, friendUserID)
}

// ListFriends mocks base method.
func (m *MockFriendRepository) ListFriends(ctx context.Context, userID uint64) ([]*dbmysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriends", ctx, userID)
	ret0, _ := ret[0].([]*dbmysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriends indicates an expected call of ListFriends.
func (mr *MockFriendRepositoryMockRecorder) ListFriends(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriends", reflect.TypeOf((*MockFriendRepository)(nil).ListFriends), ctx, userID)
}

// ListPendingRequests mocks base method.
func (m *MockFriendRepository) ListPendingRequests(ctx context.Context, userID uint64) ([]*dbmysql.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingRequests", ctx, userID)
	ret0, _ := ret[0].([]*dbmysql.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingRequests indicates an expected call of ListPendingRequests.
func (mr *MockFriendRepositoryMockRecorder) ListPendingRequests(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingRequests", reflect.TypeOf((*MockFriendRepository)(nil).ListPendingRequests), ctx, userID)
}

// UpdateFriendRequest mocks base method.
func (m *MockFriendRepository) UpdateFriendRequest(ctx context.Context, friend *dbmysql.Friend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFriendRequest", ctx, friend)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFriendRequest indicates an expected call of UpdateFriendRequest.
func (mr *MockFriendRepositoryMockRecorder) UpdateFriendRequest(ctx, friend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFriendRequest", reflect.TypeOf((*MockFriendRepository)(nil).UpdateFriendRequest), ctx, friend)
}
