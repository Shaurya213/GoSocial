// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/user_service.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	dbmysql "gosocial/internal/dbmysql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AcceptFriendRequest mocks base method.
func (m *MockUserService) AcceptFriendRequest(ctx context.Context, userID, requesterID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptFriendRequest", ctx, userID, requesterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptFriendRequest indicates an expected call of AcceptFriendRequest.
func (mr *MockUserServiceMockRecorder) AcceptFriendRequest(ctx, userID, requesterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptFriendRequest", reflect.TypeOf((*MockUserService)(nil).AcceptFriendRequest), ctx, userID, requesterID)
}

// GetProfile mocks base method.
func (m *MockUserService) GetProfile(ctx context.Context, userID uint64) (*dbmysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, userID)
	ret0, _ := ret[0].(*dbmysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserServiceMockRecorder) GetProfile(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserService)(nil).GetProfile), ctx, userID)
}

// GetUserDevices mocks base method.
func (m *MockUserService) GetUserDevices(ctx context.Context, userID uint64) ([]*dbmysql.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDevices", ctx, userID)
	ret0, _ := ret[0].([]*dbmysql.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDevices indicates an expected call of GetUserDevices.
func (mr *MockUserServiceMockRecorder) GetUserDevices(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDevices", reflect.TypeOf((*MockUserService)(nil).GetUserDevices), ctx, userID)
}

// ListFriends mocks base method.
func (m *MockUserService) ListFriends(ctx context.Context, userID uint64) ([]*dbmysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFriends", ctx, userID)
	ret0, _ := ret[0].([]*dbmysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFriends indicates an expected call of ListFriends.
func (mr *MockUserServiceMockRecorder) ListFriends(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFriends", reflect.TypeOf((*MockUserService)(nil).ListFriends), ctx, userID)
}

// LoginUser mocks base method.
func (m *MockUserService) LoginUser(ctx context.Context, handle, password string) (*dbmysql.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, handle, password)
	ret0, _ := ret[0].(*dbmysql.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserServiceMockRecorder) LoginUser(ctx, handle, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserService)(nil).LoginUser), ctx, handle, password)
}

// RegisterDevice mocks base method.
func (m *MockUserService) RegisterDevice(ctx context.Context, userID uint64, token, platform string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDevice", ctx, userID, token, platform)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDevice indicates an expected call of RegisterDevice.
func (mr *MockUserServiceMockRecorder) RegisterDevice(ctx, userID, token, platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDevice", reflect.TypeOf((*MockUserService)(nil).RegisterDevice), ctx, userID, token, platform)
}

// RegisterUser mocks base method.
func (m *MockUserService) RegisterUser(ctx context.Context, handle, email, password string) (*dbmysql.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, handle, email, password)
	ret0, _ := ret[0].(*dbmysql.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserServiceMockRecorder) RegisterUser(ctx, handle, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserService)(nil).RegisterUser), ctx, handle, email, password)
}

// RemoveDevice mocks base method.
func (m *MockUserService) RemoveDevice(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDevice", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDevice indicates an expected call of RemoveDevice.
func (mr *MockUserServiceMockRecorder) RemoveDevice(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDevice", reflect.TypeOf((*MockUserService)(nil).RemoveDevice), ctx, token)
}

// SendFriendRequest mocks base method.
func (m *MockUserService) SendFriendRequest(ctx context.Context, userID, targetUserID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFriendRequest", ctx, userID, targetUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFriendRequest indicates an expected call of SendFriendRequest.
func (mr *MockUserServiceMockRecorder) SendFriendRequest(ctx, userID, targetUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFriendRequest", reflect.TypeOf((*MockUserService)(nil).SendFriendRequest), ctx, userID, targetUserID)
}

// TouchDevice mocks base method.
func (m *MockUserService) TouchDevice(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TouchDevice", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// TouchDevice indicates an expected call of TouchDevice.
func (mr *MockUserServiceMockRecorder) TouchDevice(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TouchDevice", reflect.TypeOf((*MockUserService)(nil).TouchDevice), ctx, token)
}

// UpdateProfile mocks base method.
func (m *MockUserService) UpdateProfile(ctx context.Context, userID uint64, email, phone, profileDetails string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, userID, email, phone, profileDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserServiceMockRecorder) UpdateProfile(ctx, userID, email, phone, profileDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserService)(nil).UpdateProfile), ctx, userID, email, phone, profileDetails)
}
